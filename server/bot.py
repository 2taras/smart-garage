from dotenv import load_dotenv
load_dotenv()

import os
import math
import random
from datetime import datetime
import logging
from typing import Optional
import json
from misc.garageapi import GarageAPI
from misc.db import get_db, User, SystemConfig, Log
from misc.bankapi import AsyncBankClient, PaymentRequest, PaymentResponse
from misc.config_manager import ConfigManager
from misc.utils import distance
from misc.models import LocationData, LoginData, PurchaseData

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from sqlalchemy.orm import Session

# Load .env

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Constants
API_TOKEN = os.getenv("API_TOKEN")
GARAGE_LOCATION = json.loads(os.getenv("GARAGE_LOCATION"))
GARAGE_PRICE = float(os.getenv("GARAGE_PRICE", "100.0"))

def get_start_keyboard(is_available: bool = True) -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton("–ö—É–ø–∏—Ç—å –≥–∞—Ä–∞–∂")] if is_available else [],
        [KeyboardButton("–í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def get_main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([
        [KeyboardButton("–ü–∞—Ä–æ–ª—å")],
        [KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å"), KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å")],
        [KeyboardButton("–°—Ç–∞—Ç—É—Å")]  # New button
    ], resize_keyboard=True)

def get_location_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[KeyboardButton("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å", request_location=True)]], 
                              resize_keyboard=True, one_time_keyboard=True)

class GarageBot:
    def __init__(self):
        self.application = Application.builder().token(API_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("exit", self.exit))
        self.application.add_handler(CommandHandler("logs", self.logs))
        self.application.add_handler(MessageHandler(filters.LOCATION, self.handle_location))
        self.application.add_handler(MessageHandler(filters.TEXT, self.handle_message))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        db = next(get_db())
        
        user = db.query(User).get(user_id)
        if not user:
            user = User(id=user_id)
            db.add(user)
            db.commit()
        
        if user.is_owner and user.is_auth:
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!", 
                reply_markup=get_main_keyboard()
            )
        else:
            await update.message.reply_text(
                "üè† –ì–∞—Ä–∞–∂-–±–æ—Ç\n\n" +
                ("üîë –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–æ–ª—è\n"
                 f"üè∑ –ì–∞—Ä–∞–∂ –¥–æ—Å—Ç—É–ø–µ–Ω –∫ –ø–æ–∫—É–ø–∫–µ –∑–∞ {GARAGE_PRICE} &$%&\n"),
                reply_markup=get_start_keyboard()
            )

    async def get_garage_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            status = await GarageAPI.get_status()
            if "error" in status:
                await update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status['error']}",
                    reply_markup=get_main_keyboard()
                )
                return

            status_text = (
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {status.get('temperature', 'N/A'):.1f}¬∞C\n"  # .1f for 1 decimal place
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {status.get('humidity', 'N/A'):.1f}%\n"        # .1f for 1 decimal place
                f"üö™ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'–û—Ç–∫—Ä—ã—Ç–æ' if status.get('state') == 'open' else '–ó–∞–∫—Ä—ã—Ç–æ'}"
            )
            
            await update.message.reply_text(
                status_text,
                reply_markup=get_main_keyboard()
            )
            
        except Exception as e:
            logger.error(f"Failed to get garage status: {str(e)}")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–∞—Ä–∞–∂–∞",
                reply_markup=get_main_keyboard()
            )
            
        except Exception as e:
            logger.error(f"Failed to get garage status: {str(e)}")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥–∞—Ä–∞–∂–∞",
                reply_markup=get_main_keyboard()
            )

    async def check_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        db = next(get_db())
        user_id = update.effective_user.id
        current_pass = ConfigManager.get_temp_password(db)
        
        if text == current_pass:
            user = db.query(User).get(user_id)
            user.is_auth = True
            db.commit()
            
            ConfigManager.reset_temp_password(db)
            await update.message.reply_text("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω", reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        text = update.message.text
        db = next(get_db())
        user = db.query(User).get(user_id)

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã)
        if user and user.current_itern == 'awaiting_card':
            user.current_itern = ''
            db.commit()
            await self.handle_card_input(update, user)
            return

        if text == "–ö—É–ø–∏—Ç—å –≥–∞—Ä–∞–∂":
            await update.message.reply_text(
                f"üí≥ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–∞—Ä–∞–∂–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä).\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {GARAGE_PRICE} —Ä—É–±."
            )
            user.current_itern = 'awaiting_card'
            db.commit()
            return
            
        if text == "–í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            return
            
        if user and user.is_auth:
            # Handle main keyboard commands
            if text == "–°—Ç–∞—Ç—É—Å":
                await self.get_garage_status(update, context)
            elif text == "–ü–∞—Ä–æ–ª—å":
                current_pass = ConfigManager.get_temp_password(db)
                await update.message.reply_text(
                    f"–ü–∞—Ä–æ–ª—å: {current_pass}\n"
                    f"https://t.me/new_garage_opener_Bot?start={current_pass}",
                    reply_markup=get_main_keyboard()
                )
            elif text in ["–û—Ç–∫—Ä—ã—Ç—å", "–ó–∞–∫—Ä—ã—Ç—å"]:
                command_map = {
                    "–û—Ç–∫—Ä—ã—Ç—å": "left",
                    "–ó–∞–∫—Ä—ã—Ç—å": "right"
                }
                user.current_itern = command_map[text]
                db.commit()
                await update.message.reply_text(
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è",
                    reply_markup=get_location_keyboard()
                )
        else:
            # Try to authenticate with password
            current_pass = ConfigManager.get_temp_password(db)
            if text == current_pass:
                user.is_auth = True
                db.commit()
                ConfigManager.reset_temp_password(db)
                await update.message.reply_text(
                    "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω", 
                    reply_markup=get_main_keyboard()
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å",
                    reply_markup=get_start_keyboard()
                )

    async def handle_card_input(self, update: Update, user: User):
            db = next(get_db())
            card_number = update.message.text

            if not card_number.isdigit() or len(card_number) != 16:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç—ã")
                return

            await update.message.delete()  # Delete card number for security
            user_id = update.effective_user.id
            
            try:
                payment = PaymentRequest(
                    amount=GARAGE_PRICE,
                    card_number=card_number,
                    description=f"Garage purchase by user {user_id}"
                )
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                client = AsyncBankClient()
                async with client as bank:
                    response = await bank.process_payment(payment)
                
                if response.status == "success":
                    # Remove all old users
                    db.query(User).delete()
                    db.commit()
                    
                    # Create new owner
                    new_owner = User(
                        id=user_id,
                        is_owner=True,
                        is_auth=True
                    )
                    db.add(new_owner)
                    
                    # Log the purchase
                    log = Log(
                        user=str(user_id),
                        action="garage_purchased",
                        timestamp=int(datetime.utcnow().timestamp())
                    )
                    db.add(log)
                    db.commit()
                    
                    await update.message.reply_text(
                        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π –≥–∞—Ä–∞–∂–∞!\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü.",
                        reply_markup=get_main_keyboard()
                    )
                else:
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ: {response.error_message}",
                        reply_markup=get_start_keyboard(True)
                    )
                    
            except Exception as e:
                logger.error(f"Purchase processing error: {str(e)}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏.",
                    reply_markup=get_start_keyboard(True)
                )
            finally:
                # Clear the current iteration
                user.current_itern = None
                db.commit()

    async def handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.username
        db = next(get_db())
        user = db.query(User).get(user_id)
        
        if not user or not user.current_itern:
            return
            
        location = update.message.location
        dist = distance(location.latitude, location.longitude, *GARAGE_LOCATION)
        
        if dist > 1000:
            await update.message.reply_text(
                "–í—ã —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –≥–∞—Ä–∞–∂–∞",
                reply_markup=get_main_keyboard()
            )
            return
            
        result = await GarageAPI.open(user.current_itern, db, user_id)
        
        # Log the action
        log = Log(
            user=username or str(user_id),
            action=user.current_itern,
            timestamp=int(datetime.utcnow().timestamp())
        )
        db.add(log)
        db.commit()
        
        await update.message.reply_text(
            "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" if result == "Success" else result,
            reply_markup=get_main_keyboard()
        )
        user.current_itern = None
        db.commit()

    async def logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        db = next(get_db())
        user = db.query(User).get(user_id)
        
        if not user or not user.is_auth:
            return
            
        logs = db.query(Log).order_by(Log.timestamp.desc()).limit(50).all()
        log_text = "\n".join([
            f"{datetime.fromtimestamp(log.timestamp)}: User {log.user} - {log.action}"
            for log in logs
        ])
        
        await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n{log_text}")

    async def exit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        db = next(get_db())
        user = db.query(User).get(user_id)
        
        if user:
            user.is_auth = False
            db.commit()
            await update.message.reply_text("–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω", reply_markup=ReplyKeyboardMarkup([]))

    def run(self):
        self.application.run_polling()

if __name__ == '__main__':
    bot = GarageBot()
    with next(get_db()) as db:
        print("Current pass:", ConfigManager.get_temp_password(db))
    bot.run()